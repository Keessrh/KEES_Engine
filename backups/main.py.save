# Als het niet draait:ssh root@159.223.10.31



cd /root/master_kees/legacy/
python3 kees_engine.py &
root       40648  0.1  3.0 407492 29648 ?        Sl   09:58   0:27 python3 /root/master_kees/kees_engine.py
root       46114  0.0  0.2   7016  2240 pts/3    S+   17:19   0:00 grep --color=auto kees_engine.py
[1] 46115
root@ubuntu-s-1vcpu-1gb-amd-ams3-01:~/master_kees/legacy# /root/master_kees/legacy/kees_engine.py:17: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  client = mqtt.Client()
INFO:paho.mqtt.client:Connected to MQTT broker
INFO:paho.mqtt.client:Subscribed to julianalaan_39/telemetry
 * Serving Flask app 'kees_engine'
 * Debug mode: off
Address already in use
Port 80 is in use by another program. Either identify and stop that program, or start the server with a different port.

[1]+  Exit 1                  python3 kees_engine.py
root@ubuntu-s-1vcpu-1gb-amd-ams3-01:~/master_kees/legacy# ps aux | grep kees_engine.py
root       40648  0.1  3.0 407492 29648 ?        Sl   09:58   0:27 python3 /root/master_kees/kees_engine.py
root       46144  0.0  0.2   7016  2252 pts/3    S+   17:22   0:00 grep --color=auto kees_engine.py
root@ubuntu-s-1vcpu-1gb-amd-ams3-01:~/master_kees/legacy# kill -9 40648
root@ubuntu-s-1vcpu-1gb-amd-ams3-01:~/master_kees/legacy# cd /root/master_kees/
python3 main.py &
[1] 46189
root@ubuntu-s-1vcpu-1gb-amd-ams3-01:~/master_kees# /root/master_kees/main.py:17: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  client = mqtt.Client()
INFO:paho.mqtt.client:Connected to MQTT broker
INFO:paho.mqtt.client:Subscribed to julianalaan_39/telemetry
 * Serving Flask app 'main'
 * Debug mode: off
INFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:80
 * Running on http://159.223.10.31:80
INFO:werkzeug:Press CTRL+C to quit
INFO:paho.mqtt.client:Received: julianalaan_39/telemetry - b'{\n  "water_inlet_temp": "28.6",\n  "water_outlet_temp": "29.7",\n  "current_flow_rate": "5.0",\n  "outdoor_air_temp": "6.7",\n  "compressor_rpm": "0.0",\n  "sdm120_watt": "12.2",\n  "target_temp_circuit1": "29.0",\n  "dhw_target_temp": "50.0",\n  "energy_state_input_holding": "1.0",\n  "operation_mode": "3.0",\n  "compressor_status": "0",\n  "dhw_heating_status": "0",\n  "cop": "0.0",\n  "opwek": "3.0",\n  "dhw_water_temp": "71.5",\n  "room_air_temp_circuit1": "21.0",\n  "price": "1.0"\n}'
Exception in thread paho-mqtt-client-:
Traceback (most recent call last):
  File "/usr/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 4523, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 2297, in loop_forever
    rc = self._loop(timeout)
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 1686, in _loop
    rc = self.loop_read()
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 2100, in loop_read
    rc = self._packet_read()
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 3142, in _packet_read
    rc = self._packet_handle()
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 3808, in _packet_handle
    return self._handle_publish()
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 4145, in _handle_publish
    self._handle_on_message(message)
  File "/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py", line 4501, in _handle_on_message
    on_message(self, self._userdata, message)
  File "/root/master_kees/main.py", line 51, in on_message
    device.process_data(msg.topic, data)
AttributeError: 'dict' object has no attribute 'process_data'
INFO:werkzeug:80.115.161.162 - - [03/Mar/2025 17:24:11] "GET / HTTP/1.1" 200 -
INFO:werkzeug:80.115.161.162 - - [03/Mar/2025 17:24:11] "GET /data HTTP/1.1" 200 -
INFO:werkzeug:80.115.161.162 - - [03/Mar/2025 17:24:17] "GET /data HTTP/1.1" 200 -
INFO:werkzeug:80.115.161.162 - - [03/Mar/2025 17:24:22] "GET /data HTTP/1.1" 200 -
INFO:werkzeug:80.115.161.162 - - [03/Mar/2025 17:24:27] "GET /data HTTP/1.1" 200 -import paho.mqtt.client as mqtt
import json
import logging
import os
import importlib
from flask import Flask, render_template_string

# Logging setup
logging.basicConfig(level=logging.DEBUG)
mqtt_logger = logging.getLogger("paho.mqtt.client")
mqtt_logger.setLevel(logging.DEBUG)

# Flask setup
app = Flask(__name__)

# MQTT setup
client = mqtt.Client()
MQTT_BROKER = "159.223.10.31"  # Was localhost, nu je server
MQTT_PORT = 1883
rc = client.connect(MQTT_BROKER, MQTT_PORT)
if rc != 0:
    mqtt_logger.error(f"Failed to connect: {mqtt.error_string(rc)}")
else:
    mqtt_logger.info("Connected to MQTT broker")

# Data opslag
huizen = {}

# Dynamisch clients laden
def load_clients():
    client_dir = "clients"
    for client_name in os.listdir(client_dir):
        client_path = os.path.join(client_dir, client_name)
        if os.path.isdir(client_path):
            huizen[client_name] = {}
            for device_file in os.listdir(client_path):
                if device_file.endswith(".py"):
                    device_name = device_file[:-3]
                    module = importlib.import_module(f"clients.{client_name}.{device_name}")
                    huizen[client_name][device_name] = module.get_data()

# MQTT callback
def on_message(client, userdata, msg):
    mqtt_logger.info(f"Received: {msg.topic} - {msg.payload}")
    parts = msg.topic.split("/")
    if len(parts) >= 2 and parts[1] == "telemetry":
        huis_id = parts[0]
        if huis_id in huizen:
            data = json.loads(msg.payload.decode())
            for device in huizen[huis_id].values():
                device.process_data(msg.topic, data)

# Dashboard
@app.route("/")
def index():
    html = """
    <h1>K.E.E.S. Control</h1>
    <div id="dashboard"></div>
    <script>
        function updateDashboard() {
            fetch('/data')
                .then(response => response.json())
                .then(data => {
                    let html = '';
                    for (let huis_id in data) {
                        for (let device_name in data[huis_id]) {
                            let huis = data[huis_id][device_name];
                            let state = huis.energy_state_input_holding;
                            let opwek = huis.opwek;
                            let price = huis.price || 0.05;
                            let temp_in = huis.water_inlet_temp;
                            let temp_out = huis.water_outlet_temp;
                            let flow = huis.current_flow_rate;
                            let outdoor_temp = huis.outdoor_air_temp;
                            let power = huis.sdm120_watt;
                            let cop = huis.cop;
                            let compressor = huis.compressor_status;
                            let dhw = huis.dhw_heating_status;
                            let dhw_target = huis.dhw_target_temp;
                            let target_temp = huis.target_temp_circuit1;
                            let overschot = opwek - power;
                            let decision = "State 8: Normaal verbruik";
                            if (price < 0.10 || opwek > 2500) decision = "State 5: Laag tarief of overschot > 2500W";
                            else if (opwek > 1500) decision = "State 6: Overschot > 1500W";
                            html += `
                                <h3>${huis_id} - ${device_name}</h3>
                                <input type='range' min='1' max='8' value='${state}' onchange='fetch("/set_state/${huis_id}/${device_name}/"+this.value)'>
                                <p><b>Live Waarden:</b></p>
                                <p>Opwek: ${opwek} W | Verbruik: ${power} W | Overschot: ${overschot} W</p>
                                <p>Temp In: ${temp_in.toFixed(1)}°C | Temp Out: ${temp_out.toFixed(1)}°C</p>
                                <p>Stroom (Flow): ${flow.toFixed(1)} l/min | Buitentemp: ${outdoor_temp.toFixed(1)}°C</p>
                                <p>COP: ${cop.toFixed(2)} | Compressor: ${compressor ? "Aan" : "Uit"}</p>
                                <p>DHW: ${dhw ? "Aan" : "Uit"} | DHW Doel: ${dhw_target.toFixed(1)}°C</p>
                                <p>Doeltemp Circuit 1: ${target_temp.toFixed(1)}°C</p>
                                <p>Prijs: ${price.toFixed(2)} €/kWh | State: ${state}</p>
                                <p><b>Beslissing:</b> ${decision}</p>
                            `;
                        }
                    }
                    document.getElementById('dashboard').innerHTML = html;
                });
        }
        setInterval(updateDashboard, 5000);
        updateDashboard();
    </script>
    """
    return render_template_string(html)

@app.route("/data")
def data():
    load_clients()  # Update data voor dashboard
    return json.dumps(huizen)

@app.route("/set_state/<huis_id>/<device_name>/<int:state>")
def set_state(huis_id, device_name, state):
    if huis_id in huizen and device_name in huizen[huis_id]:
        huizen[huis_id][device_name].process_data(f"{huis_id}/command", {"energy_state_input_holding": state})
        client.publish(f"{huis_id}/command", json.dumps({"energy_state_input_holding": state}))
    return "State set!"

# Start
client.on_message = on_message
load_clients()
for huis_id in huizen:
    client.subscribe(f"{huis_id}/telemetry")
    mqtt_logger.info(f"Subscribed to {huis_id}/telemetry")
client.loop_start()
app.run(host="0.0.0.0", port=80)
